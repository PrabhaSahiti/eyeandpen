# -*- coding: utf-8 -*-
"""count_msgType

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_EPE9nwt_QzIIAa7FGAXsBOmiLIrfP8m
"""

"""
Counts the number of times each message type occurs
Inputs
  - msgStatements: list of message statements from raw file
  - msgTimes: list of timestamps of message statements 
  - trialIndex: dataframe of all start and end time of every trial
Outputs
  - statement_count: dataframe of all the unique statements and their number of occurances
"""
def count_msgType(msgStatements, msgTimes, trialIndex, patientNum):
  state_count = list(dict.fromkeys(msgStatements))
  count_rowCount = len(state_count)
  startZeroes = [0]*count_rowCount
  emptyStrings = ['']*count_rowCount
  comb = {'Message':state_count,'Count':startZeroes, 'Trial Numbers':emptyStrings}
  statement_count = pd.DataFrame(comb, columns = ['Message', 'Count', 'Trial Numbers'], dtype = str)
  convert_dict = {'Message': int,
                'Count': float,
                'Trial Numbers':str
               }
  msg_rowCount = len(msgStatements)
  time_rowCount = trialIndex.shape[0]
  curr_count = 0
  while curr_count < count_rowCount:
    currMsg = statement_count.iloc[curr_count,0]
    curr_msg = 0
    while curr_msg < msg_rowCount: 
      if currMsg in msgStatements[curr_msg]:
        statement_count.iloc[curr_count, 1] = int(statement_count.iloc[curr_count, 1]) + 1
        searchTime = int(msgTimes.iloc[curr_msg,0])
        tempTime = 0
        while tempTime < time_rowCount:
          if (int(searchTime) >= int(trialIndex.iloc[tempTime, 1])) and (int(searchTime) <= int(trialIndex.iloc[tempTime, 2])):
            statement_count.iloc[curr_count,2] = statement_count.iloc[curr_count,2]+" "+str(trialIndex.iloc[tempTime, 0])
            break
          tempTime = tempTime + 1
      curr_msg = curr_msg + 1
    curr_count = curr_count + 1
  return statement_count